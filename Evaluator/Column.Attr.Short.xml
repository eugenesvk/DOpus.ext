<?xml version="1.0"?>
<evalcolumn align="1" attrrefresh="yes" autorefresh="yes" category="std" customgrouping="no" foldertype="shell" header="⅊" keyword="attr_shortε" maxstars="5" namerefresh="no" nocache="no" reversegroups="no" reversesort="no" supportmarkup="no" title="Attributes.Short.ε" type="0" width="2">// v0.8@25-09
// Column formatted with shorter attribute indicators (no &apos;-&apos;), reverse &apos;i&apos; shown when content indexing is enabled, and smaller symbols ₐ vs a
  // do order and reversing manually since there are no loops in Evaluator

if (!IsSet(attr)) {return;}

flag = [ // attribute numeric flag constants, use bitwise &amp; comparison to check a flag status from attr value
  // case insensitive! s=S
  //        	    flag_x_N learn.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants
  r =      1	; //read_only          	F  apps can read file, but not write/delete it (not honored on dirs)
  h =      2	; //hidden             	FD not included in an ordinary directory listing
  s =      4	; //system             	FD OS uses a part of, or uses exclusively
  a =     32	; //archive            	FD apps typically mark files for backup or removal
  t =    256	; //temporary          	F  ×Opus× signals to FS to avoid writing to disk
  sp=    512	; //sparse             	F  ×≝Opus +custom× sparse file
  c =   2048	; //compressed         	F: all data is compressed
  o =   4096	; //offline_storage    	F file data not available immediately (physically moved to offline storage). Apps should not arbitrarily change this attribute
  //        	                       	D: ≝compression for new files/subdirs
  i =   8192	; //not_content_indexed	not to be indexed by the content indexing service
  e =  16384	; //encrypted (XOR c)  	F: all data streams are encrypted
  //        	                       	D: ≝encryption for new files/subdirs
  l =   1024	; //reparse_point      	×≝Opus +custom×
  //        	                       	FD has an associated reparse point or
  //        	                       	F = symbolic link
  // Used by Remote Storage, which is the hierarchical storage management software
  p =  524288	; //  pinned	 ×≝Opus +custom× User intent that file/dir should be     kept fully present locally even when not being actively accessed
  u = 1048576	; //unpinned	 ×≝Opus ±custom× User intent that file/dir should be NOT kept fully present locally except when being actively accessed
]

//file_attribute_?     	    Dec₁₀	  Hex₁₆	FD	Description
//readonly             	        1	      1	F 	App can read, not write/delete it
//hidden               	        2	      2	FD	Not included in an ordinary directory listing
//system               	        4	      4	FD	OS uses a part of or exclusively
//_n/a_                	        8	      8	  	RESERVED for old DOS VOLID (volume ID)
//directory            	       16	     10	 D	handle that identifies a directory
//archive              	       32	     20	FD	App use to mark for backup/removal
//device               	       64	     40	. 	RESERVED for system use
//normal               	      128	     80	F 	No other attr set, only valid alone
//temporary            	      256	    100	F 	Temp storage. File systems avoid writing data back to mass storage if sufficient cache memory is available, because typically, an app deletes a temporary file after the handle is closed. In that scenario, the system can entirely avoid writing the data. Otherwise, the data is written after the handle is closed.
//sparse_file          	      512	    200	F 	sparse file
//reparse_point        	    1,024	    400	FD	FD has an associated reparse point or
//                     	         	       	  	F = symbolic link
//compressed           	    2,048	    800	FD	is compressed
//                     	         	       	  	F: all of the data in the file is compressed
//                     	         	       	  	D: compression is ≝ for new F/subD
//offline              	    4,096	   1000	F 	F data not available immediately. Indicates that F data is physically moved to offline storage. Used by Remote Storage (hierarchical storage management software). App should not arbitrarily change this attribute
//unpinned             	1,048,576	10,0000	. 	indicates that the file or directory should not be kept fully present locally except when being actively accessed (for hierarchical storage management software)
//not_content_indexed  	    8,192	   2000	FD	not to be indexed by the content indexing service
//encrypted            	   16,384	   4000	FD	encrypted
//                     	         	       	  	F: all data streams in the file are encrypted
//                     	         	       	  	D: encryption is ≝ for new F/subD
//integrity_stream     	   32,768	   8000	FD	[ReFS] Dir or user data stream is configured with integrity, not in an ordinary directory listing. The integrity setting persists with the file if it&apos;s renamed. If a file is copied the destination file will have integrity set if either the source file or destination directory have integrity set
//virtual              	   65,536	 1,0000	. 	RESERVED for system use
//no_scrub_data        	  131,072	 2,0000	. 	[ReFS | Storage Spaces] user data stream not to be read by the background data integrity scanner (AKA scrubber). When set on a directory it only provides inheritance. Not in an ordinary directory listing
//ea                   	  262,144	 4,0000	FD	with extended attributes. IMPORTANT: This constant is for internal use only.
//pinned               	  524,288	 8,0000	. 	indicates user intent that the file or directory should be kept fully present locally even when not being actively accessed (for hierarchical storage management software)
//unpinned             	1,048,576	10,0000	. 	indicates that F/D shouldn't be kept fully present locally except when being actively accessed (for hierarchical storage management software)
//recall_on_open       	  262,144	 4,0000	. 	only in directory enumeration classes (FILE_DIRECTORY_INFORMATION, FILE_BOTH_DIR_INFORMATION, etc.). F/D has no physical representation on the local system, it&apos;s virtual. Opening the item will be more expensive than normal, e.g. it will cause at least some of it to be fetched from a remote store.
//recall_on_data_access	4,194,304	40,0000	. 	F/D not fully present locally
//                     	         	       	  	F: not all of its data is on local storage (e.g. it may be sparse with some data still in remote storage)
//                     	         	       	  	D: some of the directory contents are being virtualized from another location
//                     	         	       	  	Reading F / enumerating D will be more expensive than normal, e.g. it will cause at least some of the file/directory content to be fetched from a remote store. Only kernel-mode callers can set this bit. File system mini filters below the 180000 – 189999 altitude range (FSFilter HSM Load Order Group) must not issue targeted cached reads or writes to files that have this attribute set. This could lead to cache pollution and potential file corruption. For more information, see Handling placeholders

pad = &quot;&quot;; // or &quot; &quot;
myAttr = &quot;&quot;;
myAttr += ( ((attr &amp; flag.r )	== flag.r ) ? &quot;r&quot;	: pad) ;
myAttr += ( ((attr &amp; flag.h )	== flag.h ) ? &quot;ₕ&quot;	: pad) ;
myAttr += ( ((attr &amp; flag.s )	== flag.s ) ? &quot;ₛ&quot;	: pad) ;
myAttr += ( ((attr &amp; flag.sp)	== flag.sp) ? &quot;S&quot;	: pad) ;
myAttr += ( ((attr &amp; flag.a )	== flag.a ) ? &quot;ₐ&quot;	: pad) ;
myAttr += ( ((attr &amp; flag.t )	== flag.t ) ? &quot;t&quot;	: pad) ;
myAttr += ( ((attr &amp; flag.c )	== flag.c ) ? &quot;c&quot;	: pad) ;
myAttr += ( ((attr &amp; flag.i )	== flag.i ) ? pad          	: &quot;ⁱ&quot;) ; // reverse, show when Indexed
myAttr += ( ((attr &amp; flag.e )	== flag.e ) ? &quot;ₑ&quot;	: pad) ;
myAttr += ( ((attr &amp; flag.l )	== flag.l ) ? &quot;l&quot;	: pad) ;
myAttr += ( ((attr &amp; flag.o )	== flag.o ) ? &quot;ₒ&quot;	: pad) ;
myAttr += ( ((attr &amp; flag.p )	== flag.p ) ? &quot;ₚ&quot;	: pad) ;
myAttr += ( ((attr &amp; flag.u )	== flag.u ) ? &quot;u&quot;	: pad) ;

return myAttr as str
</evalcolumn>
